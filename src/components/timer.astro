<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
  <div id="scramble" class="text-lg md:text-xl text-center mb-6 font-mono text-gray-800 dark:text-gray-200 min-h-[3rem] break-words"></div>
  
  <div class="flex justify-center mb-8">
    <div id="timer" class="text-5xl md:text-7xl font-bold text-gray-900 dark:text-white font-mono">0.00</div>
  </div>
  
  <div class="flex flex-col md:flex-row justify-center gap-4 mb-6">
    <button id="newScrambleBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors">
      New Scramble
    </button>
    <button id="resetHistoryBtn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition-colors">
      Reset History
    </button>
  </div>

  <div class="mt-8">
    <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-white">History</h2>
    <div class="overflow-x-auto">
      <table class="w-full text-left">
        <thead>
          <tr class="border-b border-gray-300 dark:border-gray-700">
            <th class="pb-2 text-gray-600 dark:text-gray-400">#</th>
            <th class="pb-2 text-gray-600 dark:text-gray-400">Time</th>
            <th class="pb-2 text-gray-600 dark:text-gray-400">Scramble</th>
          </tr>
        </thead>
        <tbody id="historyBody">
          <!-- History items will be added here -->
        </tbody>
      </table>
    </div>
  </div>

  <div class="mt-6 text-center text-sm text-gray-600 dark:text-gray-400">
    <p>Press spacebar or tap timer to start/stop</p>
  </div>
</div>

<script>
  import { randomScrambleForEvent } from "https://cdn.cubing.net/v0/js/cubing/scramble";

  // Timer state
  let isRunning = false;
  let startTime = 0;
  let timerInterval: number | undefined;
  let solves: { time: number; scramble: string }[] = [];
  let currentScramble = '';

  // DOM elements
  const timerElement = document.getElementById('timer')!;
  const scrambleElement = document.getElementById('scramble')!;
  const historyBody = document.getElementById('historyBody')!;
  const newScrambleBtn = document.getElementById('newScrambleBtn')!;
  const resetHistoryBtn = document.getElementById('resetHistoryBtn')!;

  // Generate a new scramble
  async function generateScramble() {
    try {
      const scramble = await randomScrambleForEvent('333');
      currentScramble = scramble.toString();
      scrambleElement.textContent = currentScramble;
    } catch (error) {
      console.error('Error generating scramble:', error);
      scrambleElement.textContent = 'Error generating scramble';
    }
  }

  // Format time in seconds to display format
  function formatTime(timeInMs: number): string {
    const seconds = timeInMs / 1000;
    return seconds.toFixed(2);
  }

  function resetHistory() {
    historyBody.innerHTML = '';
    solves = [];
  }

  // Start the timer
  function startTimer() {
    if (isRunning) return;
    
    isRunning = true;
    startTime = Date.now();
    timerElement.classList.add('text-green-600');
    
    timerInterval = setInterval(() => {
      const currentTime = Date.now();
      const elapsedTime = currentTime - startTime;
      timerElement.textContent = formatTime(elapsedTime);
    }, 10);
  }

  // Stop the timer
  function stopTimer() {
    if (!isRunning) return;
    
    clearInterval(timerInterval);
    isRunning = false;
    
    const endTime = Date.now();
    const elapsedTime = endTime - startTime;
    timerElement.textContent = formatTime(elapsedTime);
    timerElement.classList.remove('text-green-600');
    
    // Save the solve
    solves.push({
      time: elapsedTime,
      scramble: currentScramble
    });
    
    updateHistory();
    resetTimer();
    // generateScramble();
  }

  // Reset the timer
  function resetTimer() {
    clearInterval(timerInterval);
    isRunning = false;
    timerElement.textContent = '0.00';
    timerElement.classList.remove('text-green-600');
  }

  // Update the history table
  function updateHistory() {
    historyBody.innerHTML = '';
    
    solves.forEach((solve, index) => {
      const row = document.createElement('tr');
      row.className = 'border-b border-gray-200 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-900';
      
      const numCell = document.createElement('td');
      numCell.className = 'py-3 pr-2 text-gray-800 dark:text-gray-200';
      numCell.textContent = (solves.length - index).toString();
      
      const timeCell = document.createElement('td');
      timeCell.className = 'py-3 pr-2 font-mono text-gray-800 dark:text-gray-200';
      timeCell.textContent = formatTime(solve.time);
      
      const scrambleCell = document.createElement('td');
      scrambleCell.className = 'py-3 text-sm text-gray-600 dark:text-gray-400 font-mono truncate max-w-[200px]';
      scrambleCell.title = solve.scramble;
      scrambleCell.textContent = solve.scramble;
      
      row.appendChild(numCell);
      row.appendChild(timeCell);
      row.appendChild(scrambleCell);
      
      // Add click event to load this scramble
      row.addEventListener('click', () => {
        currentScramble = solve.scramble;
        scrambleElement.textContent = currentScramble;
      });
      
      historyBody.prepend(row);
    });
  }

  // Event listeners
  document.addEventListener('keydown', (e) => {
    if (e.code === 'Space') {
      e.preventDefault();
      if (isRunning) {
        stopTimer();
      } else {
        startTimer();
      }
    }
  });

  timerElement.addEventListener('click', () => {
    if (isRunning) {
      stopTimer();
    } else {
      startTimer();
    }
  });

  newScrambleBtn.addEventListener('click', generateScramble);
  resetHistoryBtn.addEventListener('click', resetHistory);

  // Initialize
  generateScramble();
</script>
